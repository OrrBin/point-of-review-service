java
~
public static void quickSort(Integer[] arr, int low, int high) 
{
	//check for empty or null array
	if (arr == null || arr.length == 0){
		return;
	}
	 
	if (low >= high){
		return;
	}

	//Get the pivot element from the middle of the list
	int middle = low + (high - low) / 2;
	int pivot = arr[middle];

	// make left < pivot and right > pivot
	int i = low, j = high;
	while (i <= j) 
	{
		//Check until all values on left side array are lower than pivot
		while (arr[i] < pivot) 
		{
			i++;
		}
		//Check until all values on left side array are greater than pivot
		while (arr[j] > pivot) 
		{
			j--;
		}
		//Now compare values from both side of lists to see if they need swapping 
		//After swapping move the iterator on both lists
		if (i <= j) 
		{
			swap (arr, i, j);
			i++;
			j--;
		}
	}
	//Do same operation as above recursively to sort two sub arrays
	if (low < j){
		quickSort(arr, low, j);
	}
	if (high > i){
		quickSort(arr, i, high);
	}
}

~
C++
~
void DFS(Graph const &graph, int v, vector<bool> &discovered)
{
	discovered[v] = true;

	cout << v << " ";

	for (int u : graph.adjList[v])
	{
		if (!discovered[u])
			DFS(graph, u, discovered);
	}
}

~
python
~
def binarySearch (arr, l, r, x): 
  
    if r >= l: 
  
        mid = l + (r - l)/2
  
        if arr[mid] == x: 
            return mid 
          
        elif arr[mid] > x: 
            return binarySearch(arr, l, mid-1, x) 
  
        else: 
            return binarySearch(arr, mid + 1, r, x) 
  
    else: 
        return -1
  
~
python
~
def fib(n):
	if n == 0:
		return 0
	if n == 1:
		return 1
	
	return fib(n-1) + fib(n-2)